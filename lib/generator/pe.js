let fs = require("fs")

class PE {
  constructor() {
    this.iter = 0

    this.verMajor = 0
    this.verMinor = 1

    this.sections = [
      {
        name:     [0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00],
        virSize:  0x1000,
        virAddr:  0x1000,
        rawSize:  0x200,
        ptrRaw:   0x200,
        flags:    0x60000020
      },
      {
        name:     [0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00],
        virSize:  0x1000,
        virAddr:  0x2000,
        rawSize:  0x200,
        ptrRaw:   0x400,
        flags:    0x40000040
      },
      {
        name:     [0x2E, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00],
        virSize:  0x1000,
        virAddr:  0x3000,
        rawSize:  0x200,
        ptrRaw:   0x600,
        flags:    0xC0000040
      }
    ]

    this.code = [
      0x6A, 0x00, 0x68, 0x00, 0x30, 0x40, 0x00, 0x68, 0x17, 0x30, 0x40, 0x00, 0x6A, 0x00, 0xFF, 0x15,
      0x70, 0x20, 0x40, 0x00, 0x6A, 0x00, 0xFF, 0x15, 0x68, 0x20, 0x40, 0x00,
    ]

    this.imports = [
      {
        symbol: [0x00, 0x00, 0x45, 0x78, 0x69, 0x74, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 0x00],
        dll:    [0x6B, 0x65, 0x72, 0x6E, 0x65, 0x6C, 0x33, 0x32,0x2E, 0x64, 0x6C, 0x6C, 0x00]
      },
      {
        symbol: [0x00, 0x00, 0x4D, 0x65, 0x73, 0x73,0x61, 0x67, 0x65, 0x42, 0x6F, 0x78, 0x41, 0x00],
        dll:    [0x75, 0x73, 0x65, 0x72, 0x33, 0x32, 0x2E, 0x64, 0x6C, 0x6C, 0x00]
      }
    ]
  }

  report(name) {
    console.log(`writing ${name} at\t0x${this.iter.toString(16)}`)
  }
  writeBytes(bytes) {
    if(typeof bytes != "object") {
      this.writer.write(Buffer.from([bytes]))
      this.iter++
    }
    if(Array.isArray(bytes)) {
      this.writer.write(Buffer.from(bytes))
      this.iter += bytes.length
    } 
    else {
      for(let k in bytes) {
        this.writeBytes(bytes[k])
      }
    }
  }
  qwordToBytes(val) {
    return [
      (val & 0xFF),
      (val & 0xFF<<8) >> 8,
      (val & 0xFF<<16) >> 16,
      (val & 0xFF<<24) >> 24,
      0, 0, 0, 0
    ] 
  }
  dwordToBytes(val) {
    return [
      (val & 0xFF),
      (val & 0xFF<<8) >> 8,
      (val & 0xFF<<16) >> 16,
      (val & 0xFF<<24) >> 24
    ] 
  }
  wordToBytes(val) {
    return [
      (val & 0xFF),
      (val & 0xFF<<8) >> 8
    ] 
  }

  getNumSections() {
    return this.wordToBytes(this.sections.length)
  }
  getTimeStamp() {
    return this.dwordToBytes(new Date().getTime()/1000)
  }
  getCodeSize() {
    return this.dwordToBytes(0x200)
  }
  getInitializedSize() {
    return this.dwordToBytes(0x600)
  }
  getUninitializedSize() {
    return this.dwordToBytes(0x00)
  }
  getAddressOfEntry() {
    return this.dwordToBytes(0x1000)
  }
  getBaseOfCode() {
    return this.dwordToBytes(0x1000)
  }
  getImageBase() {
    return this.qwordToBytes(0x400000)
  }
  getSectionAlignment() {
    return this.dwordToBytes(0x1000)
  }
  getFileAlignment() {
    return this.dwordToBytes(0x200)
  }
  getSizeOfImage() {
    return this.dwordToBytes(0x4000)
  }
  getSizeOfHeaders() {
    return this.dwordToBytes(0x400)
  }
  getSizeOfStackReserve() {
    return this.qwordToBytes(0x100000)
  }
  getSizeOfStackCommit(){
    return this.qwordToBytes(0x1000)
  }
  getSizeOfHeapReserve(){
    return this.qwordToBytes(0x100000)
  }
  getSizeOfHeapCommit() {
    return this.qwordToBytes(0x1000)
  }
  getImportTableAddrAndSize() {
    return [
      ...this.dwordToBytes(0x2000),
      ...this.dwordToBytes(0x200)
    ]
  }

  writeDOSHeader() {
    this.report("DOS header")
    this.writeBytes({
      signature:  [0x4D, 0x5A],
      lastSize:   [0x00, 0x00],
      nblocks:    [0x00, 0x00],
      nreloc:     [0x00, 0x00],
      hdrsize:    [0x00, 0x00],
      minalloc:   [0x00, 0x00],
      maxalloc:   [0x00, 0x00],
      ss:         [0x00, 0x00],
      sp:         [0x00, 0x00],
      checksum:   [0x00, 0x00],
      ip:         [0x00, 0x00],
      cs:         [0x00, 0x00],
      relocpos:   [0x00, 0x00],
      noverlay:   [0x00, 0x00],
      reserved0:  Array(8).fill(0x00),
      oem_id:     [0x00, 0x00],
      oem_info:   [0x00, 0x00],
      reserved1:  Array(20).fill(0x00),
      peOffset:   [0x40, 0x00, 0x00, 0x00]
    })
  }

  writePEHeader() {
    this.report("PE header")
    this.writeBytes({
      magic:          [0x50, 0x45, 0x00, 0x00],
      machine:        [0x64, 0x86],
      numSections:    this.getNumSections(),
      timeStamp:      this.getTimeStamp(),
      ptrSymbolTable: [0x00, 0x00, 0x00, 0x00],
      numSymbols:     [0x00, 0x00, 0x00, 0x00],
      sizeOfOptHeader:[0xF0, 0x00],
      flags:          [0x22, 0x00]
    })
    this.writeOptionalHeader()
  }

  writeOptionalHeader() {
    this.report("optional header")
    this.writeBytes({
      magic:              [0x0B, 0x02],
      linkVersMajor:      this.verMajor,
      linkVersMinor:      this.verMinor,
      sizeOfCode:         this.getCodeSize(),
      sizeOfInitialized:  this.getInitializedSize(),
      sizeOfUninitialized:this.getUninitializedSize(),
      addressOfEntry:     this.getAddressOfEntry(),
      baseOfCode:         this.getBaseOfCode(),
      imageBase:          this.getImageBase(),
      sectionAlignment:   this.getSectionAlignment(),
      fileAlignment:      this.getFileAlignment(),
      osVerMajor:         [0x06, 0x00],
      osVerMinor:         [0x00, 0x00],
      imageVerMajor:      [0x00, 0x00],
      imageVerMinor:      [0x00, 0x00],
      subSysVerMajor:     [0x06, 0x00],
      sybSysVerMinor:     [0x00, 0x00],
      win32Ver:           [0x00, 0x00, 0x00, 0x00],
      sizeOfImage:        this.getSizeOfImage(),
      sizeOfHeaders:      this.getSizeOfHeaders(),
      checksum:           [0x00, 0x00, 0x00, 0x00],
      subsystem:          [0x03, 0x00],
      dllCharacteristics: [0x00, 0x00],
      sizeOfStackReserve: this.getSizeOfStackReserve(),
      sizeOfStackCommit:  this.getSizeOfStackCommit(),
      sizeOfHeapReserve:  this.getSizeOfHeapReserve(),
      sizeOfHeapCommit:   this.getSizeOfHeapCommit(),
      loaderFlags:        [0x00, 0x00, 0x00, 0x00],
      numberOfRvaAndSizes:[0x10, 0x00, 0x00, 0x00]
    })
    this.writeDataDirectories()
  }

  writeDataDirectories() {
    this.report("data directories")
    this.writeBytes({
      exportTable:        Array(8).fill(0x00),
      importTable:        this.getImportTableAddrAndSize(),
      resourceTable:      Array(8).fill(0x00),
      exceptionTable:     Array(8).fill(0x00),
      certificateTable:   Array(8).fill(0x00),
      baseRelocationTable:Array(8).fill(0x00),
      debug:              Array(8).fill(0x00),
      architecture:       Array(8).fill(0x00),
      globalPtr:          Array(8).fill(0x00),
      tlsTable:           Array(8).fill(0x00),
      loadConfigTable:    Array(8).fill(0x00),
      boundImport:        Array(8).fill(0x00),
      IAT:                Array(8).fill(0x00),
      delayImportDescriptor:Array(8).fill(0x00),
      CLRRuntimeHeader:   Array(8).fill(0x00),
      reserved:           Array(8).fill(0x00),
    })
  }

  writeSectionsTable() {
    this.report("section table")
    for(let sec of this.sections) {
      this.writeBytes({
        name:     sec.name,
        virSize:  this.dwordToBytes(sec.virSize),
        virAddr:  this.dwordToBytes(sec.virAddr),
        rawSize:  this.dwordToBytes(sec.rawSize),
        ptrRaw:   this.dwordToBytes(sec.ptrRaw),
        ptrReloc: [0x00, 0x00, 0x00, 0x00],
        ptrLineNo:[0x00, 0x00, 0x00, 0x00],
        numReloc: [0x00, 0x00],
        numLineNo:[0x00, 0x00],
        flags:    this.dwordToBytes(sec.flags)
      })
    }
  }

  writeTextSection() {
    this.writeBytes(Array(this.sections[0].ptrRaw - this.iter).fill(0x00))
    this.writeBytes(this.code)
  }
  writeImportSection() {
    this.writeBytes(Array(this.sections[1].rawSize - this.code.length).fill(0x00))

    let after = this.iter + this.imports.length * 20

    for(let i = 0; i < this.imports; i++) {
      let imp = this.imports[i]

      let afterSize = 8 + 8 + (imp.symbol.length + 1) + (imp.dll.length + 1)

      this.writeBytes({
        ptrPtrSymName:  this.dwordToBytes(after + 0),
        _:              Array(8).fill(0x00),
        ptrDllName:     this.dwordToBytes(after + 0),
        ptrMountPoint:  this.dwordToBytes(after + 0),
      })
    }

    for(let i = 0; i < this.imports; i++) {
      let imp = this.imports[i]
      this.writeBytes({
        ptrSymName: this.qwordToBytes(),
        symName: imp.symbol,
        mountPoint: this.qwordToBytes(),
        dllName: imp.dll
      })
    }
  }

  write(file) {
    this.writer = fs.createWriteStream(file);
    this.writeDOSHeader()
    this.writePEHeader()
    this.writeSectionsTable()
    this.writeTextSection()
  }
}

function pe() {
  let timeStamp = (new Date).getTime()/1000;
  let ts0 = (timeStamp & 0xFF)
  let ts1 = (timeStamp & 0xFF<<8) >> 8
  let ts2 = (timeStamp & 0xFF<<16) >> 16
  let ts3 = (timeStamp & 0xFF<<24) >> 24

  let exeStart = 0x1000
  let es0 = (exeStart & 0xFF)
  let es1 = (exeStart & 0xFF<<8) >> 8
  let es2 = (exeStart & 0xFF<<16) >> 16
  let es3 = (exeStart & 0xFF<<24) >> 24

  let data = [
    ////////////////////////////////// MS-DOS header [0x00; 0x40] //////////////////////////////////   
    //signature|lastSize---|nblocks----|nreloc-----|hdrsize----|minalloc---|maxalloc---|ss---------|
    0x4D, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    //sp-------|checksum---|ip---------|cs---------|relocpos---|noverlay---|reserved--------------- 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    //---------------------|oem_id-----|oem_info---|reserved---------------------------------------
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    //---------------------------------------------------------------------|offset of PE header----|
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
    
    //////////////////////////////////// PE header [0x40; 0x58] ////////////////////////////////////
    //Magic----------------|Machine----|#sections--|TimeDateStamp----------|PointerToSymbolTable---|
    0x50, 0x45, 0x00, 0x00, 0x64, 0x86, 0x04, 0x00, ts0, ts1, ts2, ts3,     0x00, 0x00, 0x00, 0x00,
    //NumberOfSymbols------|SizeOptHead|Flags------|
    0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x22, 0x00,

    ///////////////////////////////// Optional header [0x58; 0xC8] /////////////////////////////////
    //                                             |Magic------|LinkerVers-|SizeOfCode-------------|
                                                    0x0b, 0x02, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00,
    //SizeOfInitializedData|SizeOfUninitializedData|AddressOfEntryPoint----|BaseOfCode-------------|
    0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, es0, es1, es2, es3,     0x00, 0x10, 0x00, 0x00,
    //ImageBase------------------------------------|SectionAlignment-------|FileAlignment----------|
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
    //OperatingSystemVers--|ImageVersion-----------|SubsystemVersion-------|Win32VersionValue------|
    0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    //SizeOfImage----------|SizeOfHeaders----------|CheckSum---------------|Subsystem--|DllChara---|
    0x00, 0x40, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    //SizeOfStackReserve---------------------------|SizeOfStackCommit------------------------------|
    0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    //SizeOfHeapReserve----------------------------|SizeOfHeapCommit-------------------------------|
    0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    //LoaderFlags----------|NumberOfRvaAndSizes----|
    0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 

    //////////////////////////////// Data directories [0xC8; 0x148] ////////////////////////////////
    //                                              Export Table-----------------------------------|
                                                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    //Import Table---------------------------------|Resource Table---------------------------------|
    0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
    //Exception Table------------------------------|Certificate Table------------------------------|
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    //Base Relocation Table------------------------|Debug------------------------------------------|
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    //Architecture---------------------------------|Global Ptr-------------------------------------|
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    //TLS Table------------------------------------|Load Config Table------------------------------|
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    //Bound Import---------------------------------|IAT--------------------------------------------|
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    //Delay Import Descriptor----------------------|CLR Runtime Header-----------------------------|
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    //Reserved-------------------------------------|
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    //////////////////////////////// Sections table [0x148; 0x1C0] /////////////////////////////////
    // SECTION #0 *********************************************************************************
    //                                              Name-------------------------------------------|
                                                    0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00, 
    //VirtualSize----------|VirtualAddress---------|SizeOfRawData----------|PointerToRawData-------|
    0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 
    //PointerToRelocations-|PointerToLinenumbers---|#Relocations|#Linenums-|Characteristics--------|
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x60,

    // SECTION #1 *********************************************************************************
    //Name-----------------------------------------|VirtualSize------------|VirtualAddress---------|
    0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 
    //SizeOfRawData--------|PointerToRawData-------|PointerToRelocations---|PointerToLinenumbers---|
    0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    //#Relocations|#Linenums|Characteristics-------|
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40,

    // SECTION #2 *********************************************************************************
    //                                              Name-------------------------------------------|
                                                    0x2E, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 
    //VirtualSize----------|VirtualAddress---------|SizeOfRawData----------|PointerToRawData-------|
    0x00, 0x10, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 
    //PointerToRelocations-|PointerToLinenumbers---|#Relocations|#Linenums-|Characteristics--------|
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0xC0,
    
    // SECTION #3 *********************************************************************************
    //Name-----------------------------------------|VirtualSize------------|VirtualAddress---------|
    0x2E, 0x72, 0x73, 0x72, 0x63, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 
    //SizeOfRawData--------|PointerToRawData-------|PointerToRelocations---|PointerToLinenumbers---|
    0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    //#Relocations|#Linenums|Characteristics-------|
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40,

    //////////////////////////////////// Padding [0x1C0; 0x200] ///////////////////////////////////
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    ///////////////////////////////////// Code [0x200; 0x21C] /////////////////////////////////////
    0x6A, 0x00, 0x68, 0x00, 0x30, 0x40, 0x00, 0x68, 0x17, 0x30, 0x40, 0x00, 0x6A, 0x00, 0xFF, 0x15,
    0x70, 0x20, 0x40, 0x00, 0x6A, 0x00, 0xFF, 0x15, 0x68, 0x20, 0x40, 0x00,
    //////////////////////////////////// Padding [0x21C; 0x400] ///////////////////////////////////
                                                                            0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    ////////////////////////////// Import structures [0x400; 0x490] ///////////////////////////////
    // IMPORT #0 **********************************************************************************
    //RVA->RVA->symbol name|??---------------------------------------------|RVA->dll name----------|
    0x3C, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x20, 0x00, 0x00,
    //RVA->mount point-----|
    0x68, 0x20, 0x00, 0x00,

    // IMPORT #1 **********************************************************************************
    //                      RVA->RVA->symbol name--|??---------------------------------------------|
                            0x44, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    //RVA->dll name--------|RVA->mount point-------|
    0x85, 0x20, 0x00, 0x00, 0x70, 0x20, 0x00, 0x00,

    // PADDING ************************************************************************************
                                                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

    //                                                                      import #0 RVA->symbol name
                                                                            0x4C, 0x20, 0x00, 0x00,
    //---------------------|import #1 RVA->symbol name---------------------|import #0 symbol name--
    0x00, 0x00, 0x00, 0x00, 0x5A, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x78,
    //---------------------------------------------------------|import #1 symbol name--------------
    0x69, 0x74, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 0x00, 0x00, 0x00, 0x4D, 0x65, 0x73, 0x73,
    //---------------------------------------------|import #0 mount point--------------------------|
    0x61, 0x67, 0x65, 0x42, 0x6F, 0x78, 0x41, 0x00, 0x4C, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    //import #1 mount point------------------------|import #0 dll name-----------------------------
    0x5A, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6B, 0x65, 0x72, 0x6E, 0x65, 0x6C, 0x33, 0x32,
    //---------------------------|import #1 dll name-----------------------------------------------|
    0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x75, 0x73, 0x65, 0x72, 0x33, 0x32, 0x2E, 0x64, 0x6C, 0x6C, 0x00,

    //////////////////////////////////// Padding [0x490; 0x600] ///////////////////////////////////
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

    //////////////////////////////////// Data [0x600; 0x624] ///////////////////////////////////
    0x61, 0x20, 0x73, 0x69, 0x6D, 0x70, 0x6C, 0x65, 0x20, 0x50, 0x45, 0x20, 0x65, 0x78, 0x65, 0x63,
    0x75, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x00, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x77, 0x6F, 0x72,
    0x6C, 0x64, 0x21, 0x00,

    /////////////////////////////////// Padding [0x624; 0x800] ///////////////////////////////////
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  ]

  // console.log(data)
  // fs.writeFileSync("./out.exe", Buffer.from(data), {
  //   encoding: null
  // })

  new PE().write("./out.exe")
}

module.exports = pe